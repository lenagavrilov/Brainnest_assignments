"""
1. If we list all the natural numbers below 10 that are multiples of 3 or 5, we get 3, 5, 6 and 9.
The sum of these multiples is 23.Find the sum of all the multiples of 3 or 5 below 1000.prime
"""


def sum_natural(top_num):
    numbers = [i for i in range(top_num) if i % 3 == 0 or i % 5 == 0]
    print(sum(numbers))


"""
2. Each new term in the Fibonacci sequence is generated by adding the previous two terms. By starting with 1 and 2, 
the first 10 terms will be: "1, 2, 3, 5, 8, 13, 21, 34, 55, 89, ...".
By considering the terms in the Fibonacci sequence whose values do not exceed four million, 
find the sum of the even-valued terms.
"""


def evens_fibonacci():
    total = 0
    prev, current = 0, 1
    while True:
        next = prev + current
        if next >= 4000000:
            break

        prev = current
        current = next
        if current % 2 == 0:
            total += current

    print(total)


"""
3. The prime factors of 13195 are 5, 7, 13 and 29. What is the largest prime factor of the number 600851475143 ?
"""


def largest_prime_factor(n):
    largest_prime = 1
    i = 2
    while i ** 2 <= n:
        while n % i == 0:
            largest_prime = i
            n = n // i
        i += 1
    if n > 1:
        largest_prime = n
    print(largest_prime)


"""
A palindromic number reads the same both ways. The largest palindrome made from the product of two 2-digit numbers is 
9009 = 91 Ã— 99. Find the largest palindrome made from the product of two 3-digit numbers.
"""


def largest_palindrom():
    largest_pal = 0
    num1_result = 0
    num2_result = 0
    for num1 in range(100, 1000):
        for num2 in range(100, 1000):
            result = num1 * num2
            if result > largest_pal:
                if result == int(str(result)[::-1]):
                    largest_pal = result
                    num1_result = num1
                    num2_result = num2

    print(f'{largest_pal} = {num1_result} x {num2_result}')


"""
5. 2520 is the smallest number that can be divided by each of the numbers from 1 to 10 without any remainder.
   What is the smallest positive number that is evenly divisible by all of the numbers from 1 to 20?
"""


def evenly_divisible():
    smallest_num = 2520
    isDivisible = False

    while not isDivisible:
        smallest_num += 2520  # any found number will be a multuple of 2520
        isDivisible = True
        for i in range(11, 21):  # if it's a multiple, I don't need to check 1 -10 range
            if smallest_num % i != 0:
                isDivisible = False
                break
    if isDivisible:
        print(smallest_num)


"""
6. The sum of the squares of the first ten natural numbers is, 1^2 + 2^2 + ... + 10^2 = 385
   The square of the sum of the first ten natural numbers is, (1 + 2 + ... + 10)^2 = 3025
   Hence the difference between the sum of the squares of the first ten natural numbers and the square of the sum is, 
   3025 - 385 = 2640.
   Find the difference between the sum of the squares of the first one hundred natural numbers and the square of the sum.
"""


def squares_diff():
    sum_of_squares = 0
    sum_num = 0

    # for loop
    for i in range(1, 101):
        sum_of_squares += i ** 2
        sum_num += i
    diff = sum_num ** 2 - sum_of_squares

    # list comprehension
    #   square_sum = sum([x for x in range(1,101)])**2
    #   sum_of_squares = sum([x**2 for x in range(1, 101)])
    #   diff = square_sum - sum_of_squares
    print(diff)


"""
7.  By listing the first six prime numbers: 2, 3, 5, 7, 11, and 13, we can see that the 6th prime is 13.
    What is the 10001st prime number?
"""


def is_this_prime(num):
    isPrime = True

    for i in range(2, num - 1):
        if num % i == 0:
            isPrime = False
            break

    if isPrime:
        return True
    else:
        return False


def prime10001():
    counter = 0
    num = 1
    while counter <= 10001:
        num += 1
        if is_this_prime(num):
            counter += 1

    print(num)
"""
8. A Pythagorean triplet is a set of three natural numbers, a < b < c, for which,
   a^2 + b^2 = c^2
   For example, 3^2 + 4^2 = 9 + 16 = 25 = 5^2.
   There exists exactly one Pythagorean triplet for which a + b + c = 1000.
   Find the product abc.
"""

def pythagorean_triplet():
    sum = 1000
    for a in range(1, sum):
        for b in range(a+1, sum):
            c = 1000 - a - b
            if a**2 + b**2 == c**2:
                print('The product is ' + str(a*b*c))

"""
9. The sum of the primes below 10 is 2 + 3 + 5 + 7 = 17.
   Find the sum of all the primes below two million.
   
"""
def sum_primes():
    num = 1
    sum = 0
    while True:
        num +=1
        if num >= 2000000:
            break
        if is_this_prime(num):
            print(num, ' ', sum)
            sum +=num
    print(sum)

"""
10. The sequence of triangle numbers is generated by adding the natural numbers. 
So the 7th triangle number would be 1 + 2 + 3 + 4 + 5 + 6 + 7 = 28. The first ten terms would be:
    1, 3, 6, 10, 15, 21, 28, 36, 45, 55, ...
    Let us list the factors of the first seven triangle numbers:
         1: 1
         3: 1,3
         6: 1,2,3,6
        10: 1,2,5,10
        15: 1,3,5,15
        21: 1,3,7,21
        28: 1,2,4,7,14,28
    We can see that 28 is the first triangle number to have over five divisors.
    What is the value of the first triangle number to have over five hundred divisors?
"""

def count_divisors(num):
    count_divisors = 0
    for i in range(1,num+1):
        if num % i == 0:
            count_divisors +=1
    return count_divisors


def triangle_nums():
    num = 500
    while True:
        if count_divisors(num) >= 500:
            break
        num += 1
    print(num)










if __name__ == '__main__':
    # sum_natural(1000)
    # evens_fibonacci()
    # largest_prime_factor(600851475143)
    # largest_palindrom()
    # evenly_divisible()
    # squares_diff()
    # prime10001()
    pythagorean_triplet()
    # sum_primes()
    #triangle_nums()
